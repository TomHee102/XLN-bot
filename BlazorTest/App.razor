@page "/support"
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">


<PageTitle>Support</PageTitle>

<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
    Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</div>

<div id="popupButton" style="cursor: pointer;" @onclick="TogglePopup">
    <img src="circle.png" alt="Popup Button" width="50" height="50" />
</div>

<div id="popupContainer" style="display: @popupDisplay;">
    <div id="popupContent">
        <div class="appPosition">
            <div class="appContainer">
                <h1><img src="XLN-logo.png" /></h1>
                <div class="chatContainer" style="max-height: 375px; overflow-y: auto;">

                    @foreach (var message in messages)
                    {
                        string[] tokens = message.Split(":");
                        if (tokens[0] == "Bot")
                        {
                            <div class="from">@tokens[1]</div>
                        }
                        else
                        {
                            <div class="to">@tokens[1]</div>
                        }

                        <br />
                    }
                </div>
                <input type="text" @bind="userMessage" />
                <button @onclick="SendMessage"><i class="fa fa-send"></i></button>
            </div>
        </div>
        <iframe id="chatFrame" src="" style="width: 100%; height: 100%; border: none;"></iframe>
    </div>
</div>

@code {
    //popup logic
    private string popupDisplay = "none";

    private void TogglePopup()
    {
        popupDisplay = (popupDisplay == "none") ? "block" : "none";
        if (popupDisplay == "block")
        {
            // Optionally, perform any actions when the popup is opened
            // For example, setting the iframe source
            // chatFrameSrc = "/chat";
        }
    }

    string directLineSecret = "qJTEYGkNoZw.1OD_Rw_WNWBNikoWudYw_NEmEOaPMz3BJuUWexKwifk";
    string botEndpoint = "https://xlnbotlangauge-bot-6838.azurewebsites.net/api/messages";
    string userMessage = "";
    List<string> messages = new List<string>();
    DirectLineClient client;
    Conversation conversation;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            client = new DirectLineClient(directLineSecret);
            conversation = await client.Conversations.StartConversationAsync();

            if (conversation != null)
            {
                Console.WriteLine($"Conversation initialized. ID: {conversation.ConversationId}");
                // Start receiving messages from the bot
                _ = Task.Run(async () => await ReceiveMessages());
            }
            else
            {
                Console.WriteLine("Failed to initialize conversation.");
                // Handle the error or provide user feedback as needed
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while initializing: {ex.Message}");
            // Handle the error or provide user feedback as needed
        }

        //Initial event 'ping' in order to recieve welcome message
        await client.Conversations.PostActivityAsync(conversation.ConversationId, new Activity
            {
                From = new ChannelAccount("User"),
                Text = "",
                Type = ActivityTypes.Event
            });
    }

    async Task SendMessage()
    {
        try
        {
            Console.WriteLine("SendMessage method invoked."); // Debug message

            if (string.IsNullOrWhiteSpace(userMessage))
            {
                Console.WriteLine("User message is empty or whitespace."); // Debug message
                return;
            }

            messages.Add($"You: {userMessage}");

            if (conversation == null)
            {
                conversation = await client.Conversations.StartConversationAsync();
            }

            if (conversation != null)
            {
                Console.WriteLine($"Sending message: '{userMessage}'"); // Debug message
                await client.Conversations.PostActivityAsync(conversation.ConversationId, new Activity
                    {
                        From = new ChannelAccount("User"),
                        Text = userMessage,
                        Type = ActivityTypes.Message
                    });
            }
            else
            {
                Console.WriteLine("Conversation is still not initialized."); // Debug message

            }

            userMessage = ""; // Clear the input field after sending
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while sending the message: {ex.Message}"); // Log error

        }
    }

    async Task ReceiveMessages()
    {
        Console.WriteLine("ReceiveMessages method invoked."); // Debug message
        try
        {
            if (conversation == null)
            {
                // If conversation is not initialized, start a new one
                conversation = await client.Conversations.StartConversationAsync();
            }

            var watermark = "";
            while (true)
            {
                var activities = await client.Conversations.GetActivitiesAsync(conversation.ConversationId, watermark);
                watermark = activities.Watermark;

                foreach (var activity in activities.Activities)
                {
                    if (activity.From.Name == "XLNBotLangauge-bot" && activity.Type == ActivityTypes.Message)
                    {
                        //Add the bot's message to the messages list immediately
                        AddBotMessage(activity.Text);
                    }
                }

                //Updates ui
                StateHasChanged();


                // await Task.Delay(0);
                await Task.Delay(3000);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while receiving messages: {ex.Message}");
            // Handle the error or provide user feedback as needed
        }
    }

    void AddBotMessage(string message)
    {
        messages.Add($"Bot: {message}");
    }
}
