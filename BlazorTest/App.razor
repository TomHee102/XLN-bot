@inject IJSRuntime JSRuntime
@page "/support"
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">


<PageTitle>Support</PageTitle>




<div id="popupButton" style="cursor: pointer;" @onclick="TogglePopup">
    <img src="@GetImageSource()" alt="Popup Button" width="50" height="50" />
</div>

<div id="popupContainer" style="display: @popupDisplay;">
    <div id="popupContent">
        <div class="appPosition">
            <div class="appContainer">
                <h1><img src="XLN-logo.png" /></h1>
                @if (!userNameEntered)
                {
                        <div class="chatContainer" id="chatContainer" style="max-height: 375px; overflow-y: auto;">
                            <div class="messageContainer from">Hi! Before we get started, could you please enter your name :)</div>

                        </div>
                        <div>
                            <input type="text" @bind="userName" @onkeyup="HandleKeyPress" placeholder="Enter your name" />
                            <button @onclick="StartConversation"><i class="fa fa-send"></i></button>
                        </div>
                }
                @if (userNameEntered && !userTimedOut)
                {
                        <div class="chatContainer" id="chatContainer" style="max-height: 375px; overflow-y: auto;">
                        @foreach (var message in messages)
                        {
                            string[] tokens = message.Split(";");
                            if (tokens[0] == "Bot")
                            {
                                            <div class="messageContainer from">@tokens[1]</div>
                                for (int i = 2; i < tokens.Count(); i++)
                                {
                                     <div><button class="prompt messageContainer">@tokens[i]</button></div>
                                }
                            }
                            else
                            {
                              <div class="messageContainer to">@tokens[1]</div>
                            }
                        }

                    </div>
                    <div>
                        <input type="text" @bind="userMessage" @onkeyup="HandleKeyPress" />
                        <button @onclick="SendMessage"><i class="fa fa-send"></i></button>
                    </div>
                }
            </div>
        </div>
        <iframe id="chatFrame" src="" style="width: 100%; height: 100%; border: none;"></iframe>
    </div>
</div>





@code {


    //popup logic
    private string popupDisplay = "none";
    private string userName = "";
    private bool userNameEntered = false;
    bool isDaisyImage = true;
    int issueID;
    int issueSolved = 0;
    private TimeSpan timeoutDuration = TimeSpan.FromSeconds(120);
    private CancellationTokenSource timeoutTokenSource;
    private DateTime lastUserActivityTime = DateTime.UtcNow;
    private bool userTimedOut = false;
    private bool canSendMessage = true;
    private bool canReceiveMessages = true;

    public string UserName
    {
        get { return userName; }
        set
        {
            userName = value;
            StateHasChanged();
        }
    }

    async Task StartConversation()
    {
        if (!string.IsNullOrWhiteSpace(userName))
        {
            userNameEntered = true;
            timeoutTokenSource = new CancellationTokenSource();
            lastUserActivityTime = DateTime.UtcNow;
            await TimeoutCountdown();
        }
        else
        {
            // Handle case where user did not enter a name
        }
    }


    string GetImageSource()
    {
        return isDaisyImage ? "Outline Daisy.png" : "Daisy.png";
    }

    private void TogglePopup()
    {
        popupDisplay = (popupDisplay == "none") ? "block" : "none";
        isDaisyImage = !isDaisyImage;
        if (popupDisplay == "block")
        {

        }
    }




    string directLineSecret = "qJTEYGkNoZw.1OD_Rw_WNWBNikoWudYw_NEmEOaPMz3BJuUWexKwifk";
    string botEndpoint = "https://xlnbotlangauge-bot-6838.azurewebsites.net/api/messages";
    string userMessage = "";
    List<string> messages = new List<string>();
    DirectLineClient client;
    Conversation conversation;

    protected override async Task OnInitializedAsync()
    {

        timeoutTokenSource = new CancellationTokenSource();
        await ReceiveMessages();

        await this.refreshlist();
        try
        {
            client = new DirectLineClient(directLineSecret);
            conversation = await client.Conversations.StartConversationAsync();

            if (conversation != null)
            {
                Console.WriteLine($"Conversation initialized. ID: {conversation.ConversationId}");
                // Start receiving messages from the bot
                _ = Task.Run(async () => await ReceiveMessages());
            }
            else
            {
                Console.WriteLine("Failed to initialize conversation.");
                // Handle the error or provide user feedback as needed
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while initializing: {ex.Message}");
            // Handle the error or provide user feedback as needed
        }

        //Initial event 'ping' in order to recieve welcome message
        
        await client.Conversations.PostActivityAsync(conversation.ConversationId, new Activity
            {
                From = new ChannelAccount("User"),
                Text = "",
                Type = ActivityTypes.Event
            });
    }

    async Task SendMessage()
    {
        try
        {
            Console.WriteLine("SendMessage method invoked."); // Debug message

            if (!canSendMessage || string.IsNullOrWhiteSpace(userMessage))
            {
                Console.WriteLine("User message is empty or whitespace."); // Debug message
                return;
            }

            // Update the last user activity time whenever a message is sent
            lastUserActivityTime = DateTime.UtcNow;

            messages.Add($"You;{userMessage}");

            if (!canSendMessage || !string.IsNullOrWhiteSpace(userMessage))
            {
                InsertLogsFromChatbot(userMessage, userName, issueID, issueSolved);
            }

            if (conversation == null)
            {
                conversation = await client.Conversations.StartConversationAsync();
            }

            if (conversation != null)
            {
                Console.WriteLine($"Sending message: '{userMessage}'"); // Debug message
                await client.Conversations.PostActivityAsync(conversation.ConversationId, new Activity
                    {
                        From = new ChannelAccount("User"),
                        Text = userMessage,
                        Type = ActivityTypes.Message
                    });
                await JSRuntime.InvokeVoidAsync("scrollToBottom");
            }
            else
            {
                Console.WriteLine("Conversation is still not initialized."); // Debug message
            }

            userMessage = ""; // Clear the input field after sending
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while sending the message: {ex.Message}"); // Log error
        }
    }
    async Task ReceiveMessages()
    {
        Console.WriteLine("ReceiveMessages method invoked."); // Debug message
        try
        {
            while (canReceiveMessages)
            {
                if (conversation == null)
                {
                    // If conversation is not initialized, start a new one
                    conversation = await client.Conversations.StartConversationAsync();
                }

                var watermark = "";
                while (true)
                {
                    var activities = await client.Conversations.GetActivitiesAsync(conversation.ConversationId, watermark);
                    watermark = activities.Watermark;





                    foreach (var activity in activities.Activities)
                    {
                        if (activity.Type == ActivityTypes.Message)
                        {
                            if (activity.From.Name == "XLNBotLangauge-bot")
                            {
                                // Add the bot's message to the messages list
                                if (activity.Text == "Did you mean:")
                                {
                                    AddBotMessage("Sorry I don't understand can you rephrase it.");
                                }
                                else
                                {
                                    //for getting the prompts to disaply
                                    string[] tokens = activity.Text.Split("+");
                                    if (tokens.Count() == 2)
                                    {

                                        if (tokens[1] == "3")
                                        {
                                            issueSolved = 1;
                                        }
                                        else
                                        {
                                            issueID = int.Parse(tokens[1]);
                                            issueSolved = 0;
                                        }
                                    }
                                    if (tokens[0].Contains("[conversationID]"))
                                    {
                                        tokens[0] = tokens[0].Replace("[conversationID]", conversation.ConversationId);
                                    }
                                    if (tokens[0].Contains("[Username]"))
                                    {
                                        tokens[0] = tokens[0].Replace("[Username]", userName);
                                    }

                                    AddBotMessage(tokens[0]);
                                }
                            }

                        }




                        if (!string.IsNullOrWhiteSpace(activity.Text) && activity.From.Name == "XLNBotLangauge-bot")
                        {
                            InsertLogsFromChatbot(activity.Text, "Bot", issueID, issueSolved);
                            StateHasChanged();
                            await JSRuntime.InvokeVoidAsync("scrollToBottom");
                        }




                    }



                    //Updates ui
                    StateHasChanged();


                    await Task.Delay(1000);


                }
            }
            }
 
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while receiving messages: {ex.Message}");
            // Handle the error or provide user feedback as needed
        }
    }


    void AddBotMessage(string message)
    {

        messages.Add($"Bot;{message}");

    }


    async Task TimeoutCountdown()
    {
        while (true)
        {
            var elapsed = DateTime.UtcNow - lastUserActivityTime;

            if (elapsed >= timeoutDuration)
            {
                Console.WriteLine("Timedout");

                // Display message indicating timeout
                messages.Add($"Bot;Daisy has timed out! Please refresh the page to continue asking questions.");

                canSendMessage = false;
                canReceiveMessages = false;

                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("scrollToBottom");
                break;
            }

            await Task.Delay(2000); // Check every second
        }
    }



    async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
            if (!userNameEntered)
            {
                await StartConversation();
            }

        }
    }

    public class Logs
    {
        public int ItemID { get; set; }
        public string ConversationID { get; set; }
        public string Username { get; set; }
        public int IssueID { get; set; }
        public string Message { get; set; }
        public string TimeSent { get; set; }
        public int? IssueSolved { get; set; }

    }

    string API_URL = "https://localhost:7268";

    private IEnumerable<Logs> logs = Array.Empty<Logs>();

    private async Task refreshlist()
    {
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(API_URL + "/api/chatlogs/GetLogs");
        httpClient.Dispose();
        using var responseStream = await response.Content.ReadAsStreamAsync();
        logs = await JsonSerializer.DeserializeAsync<IEnumerable<Logs>>(responseStream);
    }


    private async Task InsertLogsFromChatbot(string message, string username, int issueid, int issueSolved)
    {

        Logs log = new Logs
            {
                ConversationID = conversation.ConversationId,
                Username = username,
                IssueID = issueid,
                Message = message,
                TimeSent = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss"),
                IssueSolved = issueSolved
            };

        // Call backend API to insert logs
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.PostAsJsonAsync(API_URL + "/api/chatlogs/InsertLogs", log);

        // Handle response if needed
        if (response.IsSuccessStatusCode)
        {
            // Log successful insertion or handle accordingly
            Console.WriteLine("Logs inserted successfully.");
        }
        else
        {
            // Handle failure
            Console.WriteLine("Failed to insert logs.");
        }
    }

}
